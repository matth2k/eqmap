
@inproceedings{esynth,
  author    = {Chen, Chen and Hu, Guangyu and Zuo, Dongsheng and Yu, Cunxi and Ma, Yuzhe and Zhang, Hongce},
  title     = {E-Syn: E-Graph Rewriting with Technology-Aware Cost Functions for Logic Synthesis},
  year      = {2024},
  isbn      = {9798400706011},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3649329.3656246},
  doi       = {10.1145/3649329.3656246},
  abstract  = {Logic synthesis plays a crucial role in the digital design flow. It has a decisive influence on the final Quality of Results (QoR) of the circuit implementations. However, existing multi-level logic optimization algorithms often employ greedy approaches with a series of local optimization steps. Each step breaks the circuit into small pieces (e.g.,k-feasible cuts) and applies incremental changes to individual pieces separately. These local optimization steps could limit the exploration space and may miss opportunities for significant improvements. To address the limitation, this paper proposes using e-graph in logic synthesis. The new workflow, named E-Syn, makes use of the well-established e-graph infrastructure to efficiently perform logic rewriting. It explores a diverse set of equivalent Boolean representations while allowing technology-aware cost functions to better support delay-oriented and area-oriented logic synthesis. Experiments over a wide range of benchmark designs show our proposed logic optimization approach reaches a wider design space compared to the commonly used AIG-based logic synthesis flow. It achieves on average 15.29\% delay saving in delay-oriented synthesis and 6.42\% area saving for area-oriented synthesis.},
  booktitle = {Proceedings of the 61st ACM/IEEE Design Automation Conference},
  articleno = {124},
  numpages  = {6},
  keywords  = {E-graph, technology-aware, logic synthesis},
  location  = {San Francisco, CA, USA},
  series    = {DAC '24}
}


@article{sgroup,
  author    = {I. M. Isaacs and Thilo Zieschang},
  title     = {Generating Symmetric Groups},
  journal   = {The American Mathematical Monthly},
  volume    = {102},
  number    = {8},
  pages     = {734--739},
  year      = {1995},
  publisher = {Taylor \& Francis},
  doi       = {10.1080/00029890.1995.12004650},
  url       = {https://doi.org/10.1080/00029890.1995.12004650},
  eprint    = {https://doi.org/10.1080/00029890.1995.12004650}
}

@article{logicmin,
  author     = {Farrahi, A. H. and Sarrafzadeh, M.},
  title      = {Complexity of the lookup-table minimization problem for FPGA technology mapping},
  year       = {2006},
  issue_date = {November 2006},
  publisher  = {IEEE Press},
  volume     = {13},
  number     = {11},
  issn       = {0278-0070},
  url        = {https://doi.org/10.1109/43.329262},
  doi        = {10.1109/43.329262},
  abstract   = {One of the main objectives in the process of mapping a digital circuit onto a LUT-based FPGA structure is minimizing the total number of lookup tables needed to implement the circuit. This will increase the size of the circuit that can be implemented using the available FPGA structure. In this paper, we show that even restricted cases of the lookup-table minimization for FPGA technology mapping are NP-complete (even when K is a small constant), and that it can be solved optimally for all values of K on a tree input in O(min{nK, nlogn}) time where n is the number of nodes in the network and K is the input capacity of the LUT's. Based on our algorithm for trees, we present a polynomial time heuristic algorithm for general Boolean networks. Experimental results confirm substantial decrease on the number of LUT's on a number of MCNC logic synthesis benchmarks compared to the algorithms that allow no or just local exploitation of Boolean properties of the circuit. We obtain 10\% to 80\% improvement on the number of LUT's compared to the previous algorithms (even though we allow very limited operations, e.g., we do not exploit Boolean properties of the circuits or decompose nodes)},
  journal    = {Trans. Comp.-Aided Des. Integ. Cir. Sys.},
  month      = nov,
  pages      = {1319-1332},
  numpages   = {14}
}

@article{qbf,
  title        = {Circuit Minimization with QBF-Based Exact Synthesis},
  volume       = {37},
  url          = {https://ojs.aaai.org/index.php/AAAI/article/view/25524},
  doi          = {10.1609/aaai.v37i4.25524},
  abstractnote = {This paper presents a rewriting method for Boolean circuits that minimizes small subcircuits with exact synthesis. Individual synthesis tasks are encoded as Quantified Boolean Formulas (QBFs) that capture the full flexibility for implementing multi-output subcircuits.
                  This is in contrast to SAT-based resynthesis, where &quot;donâ€™t cares&quot; are computed for an individual gate, and replacements are confined to the circuitry used exclusively by that gate.
                  An implementation of our method achieved substantial size reductions compared to state-of-the-art methods across a wide range of benchmark circuits.},
  number       = {4},
  journal      = {Proceedings of the AAAI Conference on Artificial Intelligence},
  author       = {Reichl, Franz-Xaver and Slivovsky, Friedrich and Szeider, Stefan},
  year         = {2023},
  month        = {Jun.},
  pages        = {4087-4094}
}